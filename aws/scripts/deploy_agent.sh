#!/usr/bin/env bash

# This script installs and configures the grafana-agent for testnet-2 nodes.
# It should be run on all testnet nodes every time this agent config changes.
# It is idempotent, therefore safe to run multiple times.
# Only secrets file needs to be updated manually.

set -e

AGENT_FILE="/etc/grafana-agent.yaml"
SECRETS_FILE="/etc/grafana-agent.secrets"
SYSTEMD_FILE="/etc/systemd/system/grafana-agent.service"

# Default HOSTNAME to $(hostname) if not defined
if [ -z "${HOSTNAME}" ]; then
  HOSTNAME=$(hostname)
fi

# Default ENV to hostname prefix, expect hostname format: <env>-<usecase>-<index>
if [ -z "${ENV}" ]; then
  ENV=$(echo "$HOSTNAME" | cut -d- -f1) # ENV is first part of hostname
  if [ -z "${ENV}" ] || [ "${ENV}" == "${HOSTNAME}" ]; then
    echo "Failed extracting ENV from HOSTNAME=${HOSTNAME}"
    exit 1
  fi
fi

AGENT_VERSION=0.36.2-1

echo "🤖 Deploying grafana-agent..."

if ! dpkg -s grafana-agent | grep -q "${AGENT_VERSION}"; then
  # Copied from https://grafana.com/docs/grafana-cloud/monitor-infrastructure/agent/static/set-up/install/install-agent-linux/
  sudo mkdir -p /etc/apt/keyrings/
  wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null
  echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main" | sudo tee /etc/apt/sources.list.d/grafana.list

  sudo apt-get update || echo "ignoring apt-get update failed..."
  sudo apt-get install -y grafana-agent="${AGENT_VERSION}"
  echo ""
else
  echo "🤖 grafana-agent ${AGENT_VERSION} already installed"
fi

echo "🤖 Ensuring grafana-agent secrets file: ${SECRETS_FILE}..."

# ensure_secret() ensures that the provided $1 secret is present in the ${SECRETS_FILE},
# initializing it to 'unset' if required.
ensure_secret() {
  if ! sudo test -f "${SECRETS_FILE}"; then
    sudo touch "${SECRETS_FILE}"
  fi

  if sudo grep -q "^${1}=" "${SECRETS_FILE}"; then
    return
  fi

  # Add the secret with 'unset' value
  sudo tee -a "${SECRETS_FILE}" > /dev/null <<EOF
${1}=unset
EOF
}

ensure_secret PROMETHEUS_URL
ensure_secret PROMETHEUS_USER
ensure_secret PROMETHEUS_PASSWORD
ensure_secret LOKI_HOST
ensure_secret LOKI_USER
ensure_secret LOKI_PASSWORD

echo "🤖 Creating grafana-agent config file: ${AGENT_FILE}..."

# monitoring_port() returns the value of 'Environment="MONITORING_PORT=<value>" from
# the provided $1 systemd unit file. It returns $2 if the service or variable is not found.
monitoring_port() {
  FILE=$(sudo systemctl status "${1}" | grep Loaded | cut -d'(' -f2 | cut -d';' -f1)
  if [ -z "$FILE" ]; then
    echo "${2}"
    return
  fi

  PORT=$(grep "Environment=\"MONITORING_PORT" "${FILE}" | cut -d'=' -f3 | sed -e 's/"//')
  if [ -z "$PORT" ]; then
    echo "${2}"
    return
  fi

  echo "${PORT}"
}

# default_port() returns the default port for the provided $1 app if it exists.
default_port() {
  if [ "${1}" == "omnid" ]; then
    echo "1317"
  elif [ "${1}" == "omni-relayer" ]; then
    echo "1318"
  elif [ "${1}" == "omni-orchestrator" ]; then
    echo "1319"
  else
    # Other omni* apps do not have a default port.
    # They MUST configure it explicitly via `Environment="MONITORING_PORT=<value>"`
    echo ""
  fi
}

# Discover all omni* systemd units
APPS=$(systemctl list-units --no-pager --no-legend "omni*" | cut -d. -f1)
SAVEIFS=$IFS   # Save current IFS (Internal Field Separator)
IFS=$'\n'      # Change IFS to newline char
APPS=($APPS)   # Split APPS by newlines into an array of the same name
IFS=$SAVEIFS   # Restore original IFS

# Add app to scrape config if it has a monitoring port (either explicitly or via default)
SCRAPE_CONFIGS=""

for APP in "${APPS[@]}"; do
  PORT=$(monitoring_port "${APP}" "$(default_port "${APP}")")
  if [ -z "${PORT}" ]; then
    echo "🚨 ${APP} does not have a configured or default monitoring port"
    exit 1
  fi
  SCRAPE_CONFIGS="${SCRAPE_CONFIGS}

      - job_name: ${APP}
        params:
          format: ['prometheus']
        static_configs:
          - targets: ['localhost:${PORT}']"
done

sudo tee ${AGENT_FILE} > /dev/null <<EOF
# File generated by deploy_agent.sh; DO NOT EDIT

# The goal is consistent labeling of both metrics and logs:
# - 'host' is the hostname
# - 'env' is the environment (staging, testnet, mainnet)
# - 'app' is the name of the app (omnid, omni-relayer, omni-orchestrator)
# - 'app_id' is single label that combines <env>:<host>:<app> (required for joins in grafana)
# - 'pid' is the process ID of the app (only available for logs)

metrics:
  global:
    scrape_interval: 30s
    external_labels:
      # Add 'host' and 'env' labels
      host: ${HOSTNAME}
      env: ${ENV}
  configs:
  - name: utils
    scrape_configs:
      - job_name: node-exporter
        static_configs:
          - targets: ['localhost:9100']
    remote_write:
      - url: \${PROMETHEUS_URL}
        basic_auth:
          username: \${PROMETHEUS_USER}
          password: \${PROMETHEUS_PASSWORD}
        write_relabel_configs:
          # Copy the 'host' label to 'instance'
          - source_labels: [host]
            target_label: instance

  - name: omni_apps
    scrape_configs: ${SCRAPE_CONFIGS}

    remote_write:
      - url: \${PROMETHEUS_URL}
        basic_auth:
          username: \${PROMETHEUS_USER}
          password: \${PROMETHEUS_PASSWORD}
        write_relabel_configs:
          # Copy the 'job' label to 'app'
          - source_labels: [job]
            target_label: app

          # Remove the 'job' label
          - action: labeldrop
            regex: job

          # Remove the 'instance' label
          - action: labeldrop
            regex: instance

          # Add the 'app_id' label
          - source_labels: [env, host, app]
            separator: ':'
            target_label: app_id
logs:
  configs:
  - name: journal
    positions:
      filename: /tmp/positions.yaml
    scrape_configs:
      - job_name: journal
        journal:
          # Add 'host' and 'env' labels
          labels:
            host: ${HOSTNAME}
            env: ${ENV}
        relabel_configs:

          # Only select logs from 'omni*' or 'docker' units
        - action: keep
          source_labels: [__journal__systemd_unit]
          regex: (omni.*|docker.*)

          # Remove the '.service' suffix and relabel as 'app'
        - source_labels: [__journal__systemd_unit]
          regex: (.+)\.service
          replacement: \${1}
          target_label: app

          # Override 'app' label with 'container_name' if present.
        - source_labels: [__journal_container_name]
          regex: (.+)
          replacement: \${1}
          target_label: app

          # Add the 'pid' label
        - source_labels: [__journal__pid]
          target_label: pid

        # Add the 'app_id' label
        - source_labels: [env, host, app]
          separator: ':'
          target_label: app_id

    clients:
      - url: https://\${LOKI_USER}:\${LOKI_PASSWORD}@\${LOKI_HOST}/loki/api/v1/push
EOF

echo "🤖 Creating systemd unit file: ${SYSTEMD_FILE}.."
sudo tee ${SYSTEMD_FILE} > /dev/null <<EOF
# File generated by deploy_agent.sh; DO NOT EDIT

[Unit]
Description=Grafana Agent
After=network-online.target

[Service]
ExecStart=/usr/bin/grafana-agent --config.file=${AGENT_FILE} --config.expand-env=true
Restart=on-failure
RestartSec=3
EnvironmentFile=${SECRETS_FILE}

[Install]
WantedBy=multi-user.target
EOF

echo ""

if grep -q unset ${SECRETS_FILE}; then
  echo "⚠️ Please populate unset secrets in ${SECRETS_FILE} then run this script again to setup systemd"
  exit 1
fi

echo "🤖 Adding grafana-agent to systemd..."
sudo systemctl daemon-reload
sudo systemctl enable grafana-agent
sudo systemctl restart grafana-agent
sleep 0.5 # Allow app to startup
sudo systemctl --no-pager -l status grafana-agent

echo "🎉 Done!"
